// <auto-generated />
using System;
using System.Collections.Generic;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AnimeContext))]
    partial class AnimeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Model.AlternativeTitles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("En")
                        .HasColumnType("text");

                    b.Property<string>("Ja")
                        .HasColumnType("text");

                    b.Property<List<string>>("Synonyms")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("AlternativeTitles");
                });

            modelBuilder.Entity("Backend.Model.Anime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Alternative_titlesId")
                        .HasColumnType("integer");

                    b.Property<int?>("Average_episode_duration")
                        .HasColumnType("integer");

                    b.Property<int?>("BroadcastId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("End_date")
                        .HasColumnType("text");

                    b.Property<int?>("Main_pictureId")
                        .HasColumnType("integer");

                    b.Property<float?>("Mean")
                        .HasColumnType("real");

                    b.Property<string>("Media_type")
                        .HasColumnType("text");

                    b.Property<string>("Nsfw")
                        .HasColumnType("text");

                    b.Property<int?>("Num_episodes")
                        .HasColumnType("integer");

                    b.Property<int?>("Num_list_users")
                        .HasColumnType("integer");

                    b.Property<int?>("Num_scoring_users")
                        .HasColumnType("integer");

                    b.Property<int?>("Popularity")
                        .HasColumnType("integer");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer");

                    b.Property<string>("Rating")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("Start_date")
                        .HasColumnType("text");

                    b.Property<int?>("Start_seasonId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Synopsis")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Alternative_titlesId");

                    b.HasIndex("BroadcastId");

                    b.HasIndex("Main_pictureId");

                    b.HasIndex("Start_seasonId");

                    b.ToTable("Anime");
                });

            modelBuilder.Entity("Backend.Model.Broadcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Day_of_the_week")
                        .HasColumnType("text");

                    b.Property<string>("Start_time")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Broadcast");
                });

            modelBuilder.Entity("Backend.Model.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnimeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("Backend.Model.MainPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Large")
                        .HasColumnType("text");

                    b.Property<string>("Medium")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MainPicture");
                });

            modelBuilder.Entity("Backend.Model.StartSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Season")
                        .HasColumnType("text");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("StartSeason");
                });

            modelBuilder.Entity("Backend.Model.Studio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnimeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("Studio");
                });

            modelBuilder.Entity("Backend.Model.Anime", b =>
                {
                    b.HasOne("Backend.Model.AlternativeTitles", "Alternative_titles")
                        .WithMany()
                        .HasForeignKey("Alternative_titlesId");

                    b.HasOne("Backend.Model.Broadcast", "Broadcast")
                        .WithMany()
                        .HasForeignKey("BroadcastId");

                    b.HasOne("Backend.Model.MainPicture", "Main_picture")
                        .WithMany()
                        .HasForeignKey("Main_pictureId");

                    b.HasOne("Backend.Model.StartSeason", "Start_season")
                        .WithMany()
                        .HasForeignKey("Start_seasonId");

                    b.Navigation("Alternative_titles");

                    b.Navigation("Broadcast");

                    b.Navigation("Main_picture");

                    b.Navigation("Start_season");
                });

            modelBuilder.Entity("Backend.Model.Genre", b =>
                {
                    b.HasOne("Backend.Model.Anime", null)
                        .WithMany("Genres")
                        .HasForeignKey("AnimeId");
                });

            modelBuilder.Entity("Backend.Model.Studio", b =>
                {
                    b.HasOne("Backend.Model.Anime", null)
                        .WithMany("Studios")
                        .HasForeignKey("AnimeId");
                });

            modelBuilder.Entity("Backend.Model.Anime", b =>
                {
                    b.Navigation("Genres");

                    b.Navigation("Studios");
                });
#pragma warning restore 612, 618
        }
    }
}
